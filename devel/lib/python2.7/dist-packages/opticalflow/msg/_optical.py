# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opticalflow/optical.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class optical(genpy.Message):
  _md5sum = "8d8fc678561657c551426004e594a041"
  _type = "opticalflow/optical"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int16 frameClass

int16 mode
geometry_msgs/Vector3 vel_rate
geometry_msgs/Vector3 vel_rate_fix
geometry_msgs/Vector3 vel_rate_integ
float32 quality

uint8 dir
uint16 angle
float32 dis

geometry_msgs/Vector3 acc_rate
geometry_msgs/Vector3 gry_rate

geometry_msgs/Quaternion quat



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','frameClass','mode','vel_rate','vel_rate_fix','vel_rate_integ','quality','dir','angle','dis','acc_rate','gry_rate','quat']
  _slot_types = ['std_msgs/Header','int16','int16','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','uint8','uint16','float32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frameClass,mode,vel_rate,vel_rate_fix,vel_rate_integ,quality,dir,angle,dis,acc_rate,gry_rate,quat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(optical, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frameClass is None:
        self.frameClass = 0
      if self.mode is None:
        self.mode = 0
      if self.vel_rate is None:
        self.vel_rate = geometry_msgs.msg.Vector3()
      if self.vel_rate_fix is None:
        self.vel_rate_fix = geometry_msgs.msg.Vector3()
      if self.vel_rate_integ is None:
        self.vel_rate_integ = geometry_msgs.msg.Vector3()
      if self.quality is None:
        self.quality = 0.
      if self.dir is None:
        self.dir = 0
      if self.angle is None:
        self.angle = 0
      if self.dis is None:
        self.dis = 0.
      if self.acc_rate is None:
        self.acc_rate = geometry_msgs.msg.Vector3()
      if self.gry_rate is None:
        self.gry_rate = geometry_msgs.msg.Vector3()
      if self.quat is None:
        self.quat = geometry_msgs.msg.Quaternion()
    else:
      self.header = std_msgs.msg.Header()
      self.frameClass = 0
      self.mode = 0
      self.vel_rate = geometry_msgs.msg.Vector3()
      self.vel_rate_fix = geometry_msgs.msg.Vector3()
      self.vel_rate_integ = geometry_msgs.msg.Vector3()
      self.quality = 0.
      self.dir = 0
      self.angle = 0
      self.dis = 0.
      self.acc_rate = geometry_msgs.msg.Vector3()
      self.gry_rate = geometry_msgs.msg.Vector3()
      self.quat = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h9dfBHf10d().pack(_x.frameClass, _x.mode, _x.vel_rate.x, _x.vel_rate.y, _x.vel_rate.z, _x.vel_rate_fix.x, _x.vel_rate_fix.y, _x.vel_rate_fix.z, _x.vel_rate_integ.x, _x.vel_rate_integ.y, _x.vel_rate_integ.z, _x.quality, _x.dir, _x.angle, _x.dis, _x.acc_rate.x, _x.acc_rate.y, _x.acc_rate.z, _x.gry_rate.x, _x.gry_rate.y, _x.gry_rate.z, _x.quat.x, _x.quat.y, _x.quat.z, _x.quat.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vel_rate is None:
        self.vel_rate = geometry_msgs.msg.Vector3()
      if self.vel_rate_fix is None:
        self.vel_rate_fix = geometry_msgs.msg.Vector3()
      if self.vel_rate_integ is None:
        self.vel_rate_integ = geometry_msgs.msg.Vector3()
      if self.acc_rate is None:
        self.acc_rate = geometry_msgs.msg.Vector3()
      if self.gry_rate is None:
        self.gry_rate = geometry_msgs.msg.Vector3()
      if self.quat is None:
        self.quat = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 167
      (_x.frameClass, _x.mode, _x.vel_rate.x, _x.vel_rate.y, _x.vel_rate.z, _x.vel_rate_fix.x, _x.vel_rate_fix.y, _x.vel_rate_fix.z, _x.vel_rate_integ.x, _x.vel_rate_integ.y, _x.vel_rate_integ.z, _x.quality, _x.dir, _x.angle, _x.dis, _x.acc_rate.x, _x.acc_rate.y, _x.acc_rate.z, _x.gry_rate.x, _x.gry_rate.y, _x.gry_rate.z, _x.quat.x, _x.quat.y, _x.quat.z, _x.quat.w,) = _get_struct_2h9dfBHf10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h9dfBHf10d().pack(_x.frameClass, _x.mode, _x.vel_rate.x, _x.vel_rate.y, _x.vel_rate.z, _x.vel_rate_fix.x, _x.vel_rate_fix.y, _x.vel_rate_fix.z, _x.vel_rate_integ.x, _x.vel_rate_integ.y, _x.vel_rate_integ.z, _x.quality, _x.dir, _x.angle, _x.dis, _x.acc_rate.x, _x.acc_rate.y, _x.acc_rate.z, _x.gry_rate.x, _x.gry_rate.y, _x.gry_rate.z, _x.quat.x, _x.quat.y, _x.quat.z, _x.quat.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vel_rate is None:
        self.vel_rate = geometry_msgs.msg.Vector3()
      if self.vel_rate_fix is None:
        self.vel_rate_fix = geometry_msgs.msg.Vector3()
      if self.vel_rate_integ is None:
        self.vel_rate_integ = geometry_msgs.msg.Vector3()
      if self.acc_rate is None:
        self.acc_rate = geometry_msgs.msg.Vector3()
      if self.gry_rate is None:
        self.gry_rate = geometry_msgs.msg.Vector3()
      if self.quat is None:
        self.quat = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 167
      (_x.frameClass, _x.mode, _x.vel_rate.x, _x.vel_rate.y, _x.vel_rate.z, _x.vel_rate_fix.x, _x.vel_rate_fix.y, _x.vel_rate_fix.z, _x.vel_rate_integ.x, _x.vel_rate_integ.y, _x.vel_rate_integ.z, _x.quality, _x.dir, _x.angle, _x.dis, _x.acc_rate.x, _x.acc_rate.y, _x.acc_rate.z, _x.gry_rate.x, _x.gry_rate.y, _x.gry_rate.z, _x.quat.x, _x.quat.y, _x.quat.z, _x.quat.w,) = _get_struct_2h9dfBHf10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h9dfBHf10d = None
def _get_struct_2h9dfBHf10d():
    global _struct_2h9dfBHf10d
    if _struct_2h9dfBHf10d is None:
        _struct_2h9dfBHf10d = struct.Struct("<2h9dfBHf10d")
    return _struct_2h9dfBHf10d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
